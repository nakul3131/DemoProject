@model DemoProject.Services.ViewModel.Security.Users.ResetPasswordViaTokenViewModel
@using DemoProject.Services.HtmlHelpers
@{
    Layout = null;
}

<!doctype html>

<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.7.0/css/all.css' integrity='sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ' crossorigin='anonymous'>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-theme.css" rel="stylesheet" />
    <link href="~/Content/css/icon.css" rel="stylesheet" />


    <title>Create New Password After Reset</title>
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700;800;900&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        .bg-image {
            height: 850px;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            background-image: url('../../Images/ResetPwd.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-color: rgba(255,255,255,0.4);
            height: 100vh;
        }

        .container{
            text-align:center;
            width :500px;
            color:#111;
            background:transparent;
            background-color:rgba(255,255,255,0.2);
            background-size:cover;
        }

        body{
            overflow:hidden;
        }

        .box {
            position: relative;
        }

            .box .square {
                position: absolute;
                background: rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(5px);
                box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.15);
                border-radius: 15px;
                animation: square 10s linear infinite;
                animation-delay: calc(-1s * var(--i));
            }

        @@keyframes square {
            0%, 100% {
                transform: translateY(-20px);
            }

            50% {
                transform: translateY(20px);
            }
        }

        .box .square:nth-child(1) {
            width: 100px;
            height: 100px;
            top: -15px;
            right: -45px;
        }

        .box .square:nth-child(2) {
            width: 150px;
            height: 150px;
            top: 105px;
            left: -180px;
            z-index: 2;
        }

        .box .square:nth-child(3) {
            width: 60px;
            height: 60px;
            bottom: 85px;
            right: -45px;
            z-index: 2;
        }

        .box .square:nth-child(4) {
            width: 50px;
            height: 50px;
            bottom: 35px;
            left: -95px;
        }

        .box .square:nth-child(5) {
            width: 50px;
            height: 50px;
            top: -15px;
            left: -25px;
        }

        .box .square:nth-child(6) {
            width: 85px;
            height: 85px;
            top: 165px;
            right: -155px;
            z-index: 2;
        }

        .card {
            position: relative;
            justify-content: center;
            align-items: center;
            background: white;
            width: 400px;
            min-height: 450px;
            margin-top: 200px;
            margin-left:35px;
            box-shadow: 0px 25px 45px rgba(0,0,0,0.1);
            border: 2px solid rgba(255,255,255,0.5);
            border-right: 2px solid rgba(255,255,255,0.2);
            border-bottom: 2px solid rgba(255,255,255,0.2);
            border-radius: 20px;
            display: flex;
            color: white;
        }

        .form {
            position: relative;
            width: 100%;
            height: 100%;
            padding: 40px;
        }

            .form h2 {
                position: relative;
                font-size: 20px;
                font-weight: 800;
                color: #fff;
                margin-bottom: 40px;
            }

                .form h2 ::before {
                    content: '';
                    position: absolute;
                    left: 0;
                    bottom: -10px;
                    width: 80px;
                    height: 4px;
                    background: rgb(255, 255, 255);
                }

            .form .inputbox {
                width: 100%;
                margin-top: 10px;
            }

                .form .inputbox input {
                    color: #495057;
                    background-color: #fff;
                    border-color: rgba(0, 0, 0, 0.2);
                    outline: 0;
                    box-shadow: none;
                    border-radius: 35px;
                }

                    .form .inputbox input::placeholder {
                        color: white;
                    }

            .form .submit input {
                width: 200px;
                height: 45px;
                margin-top: 10px;
                font-size: 10px;
                background: rgb(255, 255, 255);
                border: none;
                outline: none;
                border: 1px solid rgba(255,255,255,0.5);
                border-right: 1px solid rgba(255,255,255,0.2);
                border-bottom: 1px solid rgba(255,255,255,0.2);
                border-radius: 30px;
                margin-left: 0px;
                color: rgb(0, 0, 0);
                box-shadow: 1px 2px 3px 3px rgba(0, 0, 0, 0.329);
            }


            .form p {
                margin-top: 10px;
                letter-spacing: 0;
                color: rgb(0, 0, 0);
            }

        .progress {
            position: relative;
            margin-left: -23%;
            width: 150%;
        }

        .form #close {
            z-index: 100;
            cursor: pointer;
            position: absolute;
            margin-left: 65%;
        }

        #submit {
            width: 310px;
            height: 40px;
            display: block;
            font-size: 16px;
            font-weight: bold;
            color: white;
            text-decoration: none;
            text-transform: uppercase;
            text-align: center;
            text-shadow: 1px 1px 0px #07526e;
            padding-top: 6px;
            margin-left: auto;
            margin-right: auto;
            right: 5px;
            position: relative;
            cursor: pointer;
            border: none;
            background: #0084f0;
            background-image: linear-gradient(-90deg, #ffd800 0%, #49a1c2 47%, #9b3c8e 100%);
            transition: 0.5s;
            border-radius: 5px;
            box-shadow: inset 0px 1px 0px #2ab7ec, 0px 5px 0px 0px #07526e, 0px 5px 10px #999;
        }

        .mobile-text {
            color: #37322e;
            font-size: 15px;
        }

        .mypro {
            width: 147%;
        }

        .field-validation-error {
            color: red;
        }

        #message {
            display: none;
            color: #000;
            position: relative;
            padding: 20px;
            margin-top: 10px;
            width: 400px;
            height: 500px;
            float: right;
            background-color: white;
            opacity: 0.9;
        }

            #message p {
                padding: 10px 35px;
            }

        .valid {
            color: green !important;
        }

            .valid:before {
                position: relative;
                left: -35px;
                content: "✔";
            }

        .invalid {
            color: red !important;
        }

            .invalid:before {
                position: relative;
                left: -35px;
                content: "✖";
            }
    </style>
</head>
<body>
    

    @*Center Of Page*@
    <div class="row bg-image">
        <div class="container">
            @*<div class="col-6"></div>*@
            <div>
                <div class="card" id="cardcenter">

                    <div class="form needs-validation  mb-5 border-top mt-3" novalidate action="#" method="#">
                        <h4 class="card-title text-center text-dark">Create New Password After Reset</h4>
                        @using (Html.BeginForm("CreateNewPasswordAfterReset", "Account", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            {
                                <div class="form-group mb-4">
                                    <label class="float-left font-weight-bold text-dark">New Password </label>
                                    @Html.PasswordFor(m => m.UserPassword, new { @class = "form-control form-rounded", @id = "validationPassword", @placeholder = "Enter New Password", @autocomplete = "off", required = "required" })
                                    @Html.ValidationMessageFor(m => m.UserPassword, "", new { @id = "UserPasswordError", @class = "text-danger" })
                                </div>

                                <div id="message">
                                    <h5>Password must contain the following:</h5>
                                    <p id="length" class="invalid">Minimum <b><span id="min"></span> Characters</b> Maximum <b><span id="max"></span> Characters</b></p>
                                    <p id="letter" class="invalid">Minimum <b><span id="lowercase"></span> Small (lowercase)</b> letter</p>
                                    <p id="capital" class="invalid">Minimum <b><span id="uppercase"></span> Capital (uppercase)</b> letter</p>
                                    <p id="number" class="invalid">Minimum <b><span id="numeric"></span> Numeric (numbers)</b></p>
                                    <p id="character" class="invalid">Minimum <b><span id="special"></span> Special character(!@@#$%^&()'[\]"?+-/*={}.,;:_)</b></p>
                                </div>

                                <div class="modal fade" id="pwd-message" tabindex="-1" role="dialog">
                                    <div class="modal-dialog modal-dialog-centered modal-dialog-zoom">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <div class="col-md-12 text-center">
                                                        <h4><span class="text-dark"><b>Password Already Exists</b></span></h4>
                                                    </div>
                                                </div>
                                                <div class="modal-body text-center">
                                                    <b class="text-dark">Your Password is Used In recent Days Chose Another Password</b>
                                                </div>
                                                <div class="modal-footer">
                                                    <div class="col-md-12 text-center">
                                                        <button type="button" class="btn btn-info" data-dismiss="modal">OK</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-floating mb-4">
                                    <div class="clearfix">
                                        <label class="float-left font-weight-bold ml-1 text-dark ">Confirm Password</label>
                                    </div>
                                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control form-rounded", @id = "confirmPassword", @placeholder = "Confirm Password", required = "required" })
                                    @Html.ValidationMessageFor(m => m.ConfirmPassword)

                                </div>
                                <div class="d-grid">
                                    <button id="submit" type="submit" class="btn btn-sm btn-block form-rounded"><h5 class="mt-2 text-white"><b>Change Password</b></h5></button>
                                </div>

                            }
                        }

                        <div id="messageModal" class="modal fade" tabindex="-1" role="dialog">
                            <div class="modal-dialog modal-dialog-centered modal-dialog-zoom" role="document">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <div class="col-md-12 text-center">
                                                <h4><span class="text-dark"><b>Password Reset</b></span></h4>
                                            </div>
                                        </div>
                                        <div class="modal-body text-center">
                                            @if (TempData["PasswordMsg"] != null)
                                            {
                                                <p>@TempData["PasswordMsg"].ToString()</p>
                                            }

                                            @if (TempData["PasswordExpiryDateMsg"] != null)
                                            {
                                                <p>@TempData["PasswordExpiryDateMsg"].ToString()</p>
                                            }
                                        </div>
                                        <div class="modal-footer text-center">
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">OK</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @Scripts.Render("~/bundles/jqueryval")
</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script src="https://unpkg.com/bootstrap-show-password@1.2.1/dist/bootstrap-show-password.min.js"></script>
<script>
    $(window).on('load', function () {
        if ('@TempData["PasswordMsg"]' != '' || '@TempData["PasswordExpiryDateMsg"]' != '') {

            $('#messageModal').modal('show');
        }
        else {
            $('#messageModal').modal('hide');
        }
    });
    var validationPopover = $('#validationPassword').popover({
        html: true,
        content:function() {
            return $('#message').html();
        },
        placement: "right",
        trigger: "manual"
    });
    $('#validationPassword').on('click', (function () {
        var userProfilePrmKey = '@Request.RequestContext.HttpContext.Session["UserProfilePrmKey"]';
        $.ajax({
            url: '/Account/GetPasswordPolicyValues',
            dataType: "json",
            type: "GET",
            data: ({ _userProfilePrmKey: userProfilePrmKey }),
            success: function (data) {
                var MinimumPasswordLength = data.MinimumPasswordLength;
                var MaximumPasswordLength = data.MaximumPasswordLength;
                var MinimumNumberOfUpperCaseCharacters = data.MinimumNumberOfUpperCaseCharacters;
                let MinimumNumberOfLowerCaseCharacters = data.MinimumNumberOfLowerCaseCharacters;
                var MinimumNumberOfSpecialCaseCharacters = data.MinimumNumberOfSpecialCaseCharacters;
                var MinimumNumberOfNumericCharacters = data.MinimumNumberOfNumericCharacters;
                var MinimumNumberOfRepetitiveCharacters = data.MinimumNumberOfRepetitiveCharacters;
                document.getElementById("lowercase").innerHTML = MinimumNumberOfLowerCaseCharacters;
                document.getElementById("uppercase").innerHTML = MinimumNumberOfUpperCaseCharacters;
                document.getElementById("numeric").innerHTML = MinimumNumberOfNumericCharacters;
                document.getElementById("min").innerHTML = MinimumPasswordLength;
                document.getElementById("max").innerHTML = MaximumPasswordLength;
                document.getElementById("special").innerHTML = MinimumNumberOfSpecialCaseCharacters;
                var myInput = document.getElementById("validationPassword");
                var letter = document.getElementById("letter");
                var capital = document.getElementById("capital");
                var number = document.getElementById("number");
                var length = document.getElementById("length");
                var character = document.getElementById("character");
                var lowerCaseLettersValue;
                var upperCaseLettersValue;
                var numbersValue;
                var lengthValue;
                var characterValue;

                myInput.onfocusout = function () {
                    debugger;
                    validationPopover.popover("hide");
                    var inputedPassword = myInput.value;
                    var userProfilePrmKey = '@Request.RequestContext.HttpContext.Session["UserProfilePrmKey"]';
                    if (userProfilePrmKey !== '') {
                        $.ajax({
                            type: "GET",
                            url: '/UserProfile/GetUserPasswordValues',
                            data: { _userProfilePrmKey: userProfilePrmKey, _inputedPassword: inputedPassword },
                            datatype: "json",
                            traditional: true,
                            success: function (data) {
                                debugger;
                                if (!data) {
                                    $('#pwd-message').modal('show');
                                    myInput.value = "";
                                }
                            }
                        });
                    }
                }

                myInput.onkeyup = function () {
                    if (myInput.value.length >= MinimumPasswordLength && myInput.value.length <= MaximumPasswordLength) {
                        length.classList.remove("invalid");
                        length.classList.add("valid");
                        myInput.classList.remove("is-invalid");
                        lengthValue = true;
                    } else {
                        length.classList.remove("valid");
                        length.classList.add("invalid");
                        myInput.classList.add("is-invalid");
                        lengthValue = false;
                    }
                    const lowerCaseLetters = new RegExp(`(?=(?:[^a-z]*[a-z]){${MinimumNumberOfLowerCaseCharacters}})`);
                    if (myInput.value.match(lowerCaseLetters)) {
                        letter.classList.remove("invalid");
                        letter.classList.add("valid");
                        myInput.classList.remove("is-invalid");
                        lowerCaseLettersValue = true;
                    } else {
                        letter.classList.remove("valid");
                        letter.classList.add("invalid");
                        myInput.classList.add("is-invalid");
                        lowerCaseLettersValue = false;
                    }
                    const upperCaseLetters = new RegExp(`(?=(?:[^A-Z]*[A-Z]){${MinimumNumberOfUpperCaseCharacters}})`);
                    if (myInput.value.match(upperCaseLetters)) {
                        capital.classList.remove("invalid");
                        capital.classList.add("valid");
                        myInput.classList.remove("is-invalid");
                        upperCaseLettersValue = true;
                    } else {
                        capital.classList.remove("valid");
                        capital.classList.add("invalid");
                        myInput.classList.add("is-invalid");
                        upperCaseLettersValue = false;
                    }
                    const numbers = new RegExp(`(?=(?:[^0-9]*[0-9]){${MinimumNumberOfNumericCharacters}})`);
                    if (myInput.value.match(numbers)) {
                        number.classList.remove("invalid");
                        number.classList.add("valid");
                        myInput.classList.remove("is-invalid");
                        numbersValue =true;
                    } else {
                        number.classList.remove("valid");
                        number.classList.add("invalid");
                        myInput.classList.add("is-invalid");
                        numbersValue = false;
                    }
                    const characters = new RegExp(`(?=(?:[^-+_!@@#$%^&*., ?]*[-+_!@@#$%^&*., ?]){${MinimumNumberOfSpecialCaseCharacters}})`);
                    if (myInput.value.match(characters)) {
                        character.classList.remove("invalid");
                        character.classList.add("valid");
                        myInput.classList.remove("is-invalid");
                        characterValue = true;
                    } else {
                        character.classList.remove("valid");
                        character.classList.add("invalid");
                        myInput.classList.add("is-invalid");
                        characterValue = false;
                    }
                    validationPopover.popover("show");
                    if (lowerCaseLettersValue == true && upperCaseLettersValue == true && numbersValue == true && lengthValue == true && characterValue == true) {
                                $("#submit").attr("disabled", false);
                            }
                            else {
                        myInput.classList.add("is-invalid");
                        $("#submit").attr("disabled", true);
                            }
                }
            },
            error: function (xhr) {
                alert("An error has occured!!!");
            }
        })
    })
        );
    $('#validationPassword').hover(function () {
        $('#validationPassword').attr('type', 'text');
    }, function () {
        $('#validationPassword').attr('type', 'password');
    });
    $('#confirmPassword').hover(function () {
        $('#confirmPassword').attr('type', 'text');
    }, function () {
        $('#confirmPassword').attr('type', 'password');
    });
</script>